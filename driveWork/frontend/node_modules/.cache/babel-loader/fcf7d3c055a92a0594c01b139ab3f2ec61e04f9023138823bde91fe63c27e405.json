{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Desktop/learn-python/delu/delreact/src/MemeGenerator.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randImg: \"http://i.imgflip.com/1bij.jpg\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChange = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      this.setState({\n        allMemeImags: memes\n      });\n    });\n  }\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImags.length);\n    const randMemeImg = this.state.allMemeImags[randNum].url;\n    this.setState({\n      randImg: randMemeImg\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"topText\",\n          placeholder: \"Top Text\",\n          value: this.state.topText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"bottomText\",\n          placeholder: \"Bottom Text\",\n          value: this.state.bottomText,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Gen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.randomImg,\n          alt: \"ion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"top\",\n          children: this.state.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bottom\",\n          children: this.state.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default MemeGenerator;","map":{"version":3,"names":["React","Component","MemeGenerator","constructor","state","topText","bottomText","randImg","handleChange","bind","handleSubmit","componentDidMount","fetch","then","response","json","memes","data","setState","allMemeImags","event","name","value","target","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","render","randomImg"],"sources":["/home/daniel/Desktop/learn-python/delu/delreact/src/MemeGenerator.js"],"sourcesContent":["import React, {Component} from \"react\";\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randImg: \"http://i.imgflip.com/1bij.jpg\"\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleChange = this.handleSubmit.bind(this)\n\n    }\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data\n                this.setState({allMemeImags: memes})\n            })\n    }\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n\n    }\n    handleSubmit(event) {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImags.length)\n        const randMemeImg = this.state.allMemeImags[randNum].url\n        this.setState({randImg: randMemeImg})\n    }\n    render() {\n        return (\n            <div>\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n                     <input\n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n\n                    <button>Gen</button>\n\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"ion\"/>\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default MemeGenerator"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AAAC;AAEvC,MAAMC,aAAa,SAASD,SAAS,CAAC;EAClCE,WAAW,GAAG;IACV,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAG;MACTC,OAAO,EAAE,EAAE;MACXC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE;IACb,CAAC;IACD,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACD,YAAY,GAAG,IAAI,CAACE,YAAY,CAACD,IAAI,CAAC,IAAI,CAAC;EAEpD;EACAE,iBAAiB,GAAG;IAChBC,KAAK,CAAC,mCAAmC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACC,QAAQ,IAAI;MACd,MAAM;QAACE;MAAK,CAAC,GAAGF,QAAQ,CAACG,IAAI;MAC7B,IAAI,CAACC,QAAQ,CAAC;QAACC,YAAY,EAAEH;MAAK,CAAC,CAAC;IACxC,CAAC,CAAC;EACV;EACAR,YAAY,CAACY,KAAK,EAAE;IAChB,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IAClC,IAAI,CAACL,QAAQ,CAAC;MAAC,CAACG,IAAI,GAAGC;IAAK,CAAC,CAAC;EAElC;EACAZ,YAAY,CAACU,KAAK,EAAE;IAChBA,KAAK,CAACI,cAAc,EAAE;IACtB,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAACxB,KAAK,CAACe,YAAY,CAACU,MAAM,CAAC;IAC1E,MAAMC,WAAW,GAAG,IAAI,CAAC1B,KAAK,CAACe,YAAY,CAACM,OAAO,CAAC,CAACM,GAAG;IACxD,IAAI,CAACb,QAAQ,CAAC;MAACX,OAAO,EAAEuB;IAAW,CAAC,CAAC;EACzC;EACAE,MAAM,GAAG;IACL,oBACI;MAAA,wBACI;QAAM,SAAS,EAAC,WAAW;QAAC,QAAQ,EAAE,IAAI,CAACtB,YAAa;QAAA,wBACpD;UACI,IAAI,EAAC,MAAM;UACX,IAAI,EAAC,SAAS;UACd,WAAW,EAAC,UAAU;UACtB,KAAK,EAAE,IAAI,CAACN,KAAK,CAACC,OAAQ;UAC1B,QAAQ,EAAE,IAAI,CAACG;QAAa;UAAA;UAAA;UAAA;QAAA,QAC9B,eACD;UACG,IAAI,EAAC,MAAM;UACX,IAAI,EAAC,YAAY;UACjB,WAAW,EAAC,aAAa;UACzB,KAAK,EAAE,IAAI,CAACJ,KAAK,CAACE,UAAW;UAC7B,QAAQ,EAAE,IAAI,CAACE;QAAa;UAAA;UAAA;UAAA;QAAA,QAC9B,eAEF;UAAA,UAAQ;QAAG;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QAEjB,eACP;QAAK,SAAS,EAAC,MAAM;QAAA,wBACjB;UAAK,GAAG,EAAE,IAAI,CAACJ,KAAK,CAAC6B,SAAU;UAAC,GAAG,EAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAE,eAC3C;UAAI,SAAS,EAAC,KAAK;UAAA,UAAE,IAAI,CAAC7B,KAAK,CAACC;QAAO;UAAA;UAAA;UAAA;QAAA,QAAM,eAC7C;UAAI,SAAS,EAAC,QAAQ;UAAA,UAAE,IAAI,CAACD,KAAK,CAACE;QAAU;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA;QAAA;QAAA;QAAA;MAAA,QAEjD;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ;EAEd;AACJ;AACA,eAAeJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}